services:
  redis-broker:
    image: redis:7 
    container_name: job_master_redis_broker 
    ports:
      - "6379:6379" 
    command: redis-server --appendonly yes 
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf 
      - redis_data:/data 

  db: # The database service
    image: postgres # Using the oficial dockerhub image
    container_name: postgres
    networks:
      - api-network # Connect to the network to be used by other containers (ej: the web server)
    environment: # all the enviroment variables defined in the container (see postgres official image docs https://hub.docker.com/_/postgres)
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: stocks_db
    
    volumes:
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.
      - db-volume:/var/lib/postgresql/data 


  # producer:
  #   build:
  #     context: ./project
  #     dockerfile: Dockerfile
  #   command: uvicorn producer:app --reload --host 0.0.0.0 --port 8000
  #   volumes:
  #     - ./project:/app
  #   ports:
  #     - '8002:8000'
  #   environment:
  #     CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  #     CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
  #   depends_on:
  #     - redis-broker

  # consumer:
  #   build:
  #     context: ./project
  #     dockerfile: Dockerfile
  #   deploy:
  #     replicas: 2
  #   command: celery -A consumer.celery_app worker --loglevel=INFO --purge --concurrency=1
  #   volumes:
  #     - ./project:/app
  #   depends_on:
  #     - redis-broker
  #     - postgres
  #   environment:
  #     CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  #     CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

  # dashboard:
  #   build:
  #     context: ./project
  #     dockerfile: Dockerfile
  #   command: bash -c "sleep 10; celery -A consumer.celery_app flower --loglevel=INFO --url_prefix=dashboard;"
  #   ports:
  #     - '5555:5555'
  #   volumes:
  #     - ./project:/app
  #   depends_on:
  #     - consumer
  #     - redis-broker
  #   environment:
  #     CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  #     CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

  jobmaster:
    build:
      context: ./project
      dockerfile: Dockerfile
    container_name: job_master_api
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    volumes:
      - ./project:/app
    depends_on:
      - redis-broker
      - postgres
    environment:
      PYTHONUNBUFFERED: 1
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

  worker:
    build:
      context: ./project
      dockerfile: Dockerfile
    container_name: job_master_celery_worker_1
    command: celery -A consumer.celery_app worker --loglevel=info
    volumes:
      - ./project:/app
    depends_on:
      - redis-broker
      - postgres
    environment:
      PYTHONUNBUFFERED: 1
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

  celery_beat:
    build:
      context: ./project
      dockerfile: Dockerfile
    container_name: job_master_celery_beat
    command: celery -A consumer.celery_app beat --loglevel=info
    volumes:
      - ./project:/app
    depends_on:
      - redis-broker
      - postgres
    environment:
      PYTHONUNBUFFERED: 1
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

volumes:
  redis_data:
  postgres_data: