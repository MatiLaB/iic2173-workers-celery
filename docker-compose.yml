services:
  redis-broker:
    image: redis:7
    container_name: job_master_redis_broker
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - api-network

  postgres:
    image: postgres:13
    container_name: job_master_postgres
    ports:
      - "3000:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - api-network

  jobmaster:
    build:
      context: ./project
      dockerfile: Dockerfile
    container_name: job_master_api
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    volumes:
      - ./project:/app
    depends_on:
      redis-broker:
        condition: service_healthy
      postgres:
        condition: service_healthy # Esperar a que Postgres también esté saludable
    environment:
      PYTHONUNBUFFERED: 1
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres # Usa el nombre del servicio de PostgreSQL
      DB_PORT: ${DB_PORT}
      REDIS_HOST: redis-broker
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    networks:
      - api-network

  worker:
    build:
      context: ./project
      dockerfile: Dockerfile
    container_name: job_master_celery_worker_1
    command: celery -A consumer.celery_app worker --loglevel=info
    volumes:
      - ./project:/app
    depends_on:
      redis-broker:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres # Usa el nombre del servicio de PostgreSQL
      DB_PORT: ${DB_PORT}
      REDIS_HOST: redis-broker
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    networks:
      - api-network

  celery_beat:
    build:
      context: ./project
      dockerfile: Dockerfile
    container_name: job_master_celery_beat
    command: celery -A consumer.celery_app beat --loglevel=info
    volumes:
      - ./project:/app
    depends_on:
      redis-broker:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres # Usa el nombre del servicio de PostgreSQL
      DB_PORT: ${DB_PORT}
      REDIS_HOST: redis-broker
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    networks:
      - api-network

networks:
  api-network:

volumes:
  redis_data:
  postgres_data: